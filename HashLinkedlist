import java.util.LinkedList;

class HashTable {
    private static class Entry {
        String key;
        String value;

        Entry(String key, String value) {
            this.key = key;
            this.value = value;
        }
    }

    private LinkedList<Entry>[] table; // Array of linked lists
    private int capacity;               // Size of the hash table
    private int size;                   // Number of elements in the hash table

    // Constructor to initialize the hash table
    public HashTable(int capacity) {
        this.capacity = capacity;
        this.table = new LinkedList[capacity];
        for (int i = 0; i < capacity; i++) {
            table[i] = new LinkedList<>(); // Initialize each linked list
        }
        this.size = 0;
    }

    // Hash function to compute index for a given key
    private int hash(String key) {
        return Math.abs(key.hashCode()) % capacity; // Simple hash function
    }

    // Method to add a new key-value pair
    public void put(String key, String value) {
        int index = hash(key);
        LinkedList<Entry> bucket = table[index];

        // Check if the key already exists and update it
        for (Entry entry : bucket) {
            if (entry.key.equals(key)) {
                entry.value = value; // Update existing value
                return;
            }
        }

        // Insert the new key-value pair
        bucket.add(new Entry(key, value));
        size++;
    }

    // Method to get the value for a given key
    public String get(String key) {
        int index = hash(key);
        LinkedList<Entry> bucket = table[index];

        // Search for the key in the linked list
        for (Entry entry : bucket) {
            if (entry.key.equals(key)) {
                return entry.value; // Return associated value
            }
        }

        return null; // Key not found
    }

    // Method to remove a key-value pair
    public void remove(String key) {
        int index = hash(key);
        LinkedList<Entry> bucket = table[index];

        // Search for the key in the linked list and remove it
        for (Entry entry : bucket) {
            if (entry.key.equals(key)) {
                bucket.remove(entry); // Remove the entry from the list
                size--;
                return;
            }
        }
    }

    // Method to print all key-value pairs in the hash table
    public void printTable() {
        for (int i = 0; i < capacity; i++) {
            LinkedList<Entry> bucket = table[i];
            if (!bucket.isEmpty()) {
                for (Entry entry : bucket) {
                    System.out.println("Key: " + entry.key + ", Value: " + entry.value);
                }
            }
        }
    }

    public static void main(String[] args) {
        HashTable hashTable = new HashTable(10);
        
        hashTable.put("A101", "Product A");
        hashTable.put("B202", "Product B");
        hashTable.put("C303", "Product C");
        
        System.out.println("Value for A101: " + hashTable.get("A101"));
        
        hashTable.remove("B202");
        
        System.out.println("After removing B202:");
        hashTable.printTable();
        
        hashTable.put("A101", "Updated Product A");
        
        System.out.println("After updating A101:");
        hashTable.printTable();
    }
}
